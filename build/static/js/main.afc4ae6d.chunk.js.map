{"version":3,"sources":["components/game/GameLogo.tsx","types/game/ParameterGame.tsx","components/game/GameSet.tsx","components/game/Room.tsx","components/game/GameStage.tsx","components/game/GameResult.tsx","components/game/GameMain.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["HELP_MONTYHALL_URL","GameLogo","ROOM_TYPE","GAME_TYPE","react_default","a","createElement","className","onClick","window","open","STORAGE_RESULT","GameSet","_ref","gameState","typeChange","setTypeChange","enable","RUNNING","concat","disabled","RoomDoor","clickAction","isUserSel","isHostSel","RoomInside","_ref2","value","Room","_ref3","roomState","ReactCardFlip_default","isFlipped","isOpen","Room_RoomDoor","Room_RoomInside","color","message","pickStateMessage","DEFAULT_ROOM","GOAT","getDefaultRooms","defaultRooms","i","push","GameStage","throwGameError","setGameResult","setGameState","_useState","useState","_useState2","Object","slicedToArray","gameMessage","setGameMessage","_useState3","_useState4","roomStates","setRoomStates","_useState5","_useState6","gameSeqIndex","setGameSeqIndex","_useState7","_useState8","userPickRoom","setUserPickRoom","_useState9","_useState10","isEnableOpen","setIsEnableOpen","console","log","toString","useEffect","gameStart","gameStop","roomIndexByHost","map","index","CAR","getIndexOfRoomOpenedByHost","setTimeout","changeStates","toConsumableArray","objectSpread","beforeUserPick","selRoomIndexByChange","roomIndexByChange","getSelRoomIndexByChange","changeStates2","setRoomOpen","selIndex","isSuccess","FINISH","rooms","roomValue","carIndex","Math","floor","random","initIRooms","roomClickAction","isSel","setRoomSelByUser","renderRooms","resultPanel","results","title","successCount","forEach","resultPercent","length","toFixed","result","resultHouse","GameResult","resultsChanged","resultsNotChanged","getPrevResultsFromLocalStorage","storageName","raw","localStorage","getItem","Array","from","s","RESULT_SUCCESS","RESULT_FAIL","setResultToLocalStorage","storageRaw","setItem","GameMain","READY","gameResult","setResultsChanged","setResultsNotChanged","loadResults","saveResults","LS_RESULTS_CHANGED","LS_RESULTS_NOT_CHANGED","game_GameLogo","msg","alert","removeItem","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.afc4ae6d.chunk.js","sourcesContent":["import React from 'react';\n\nconst HELP_MONTYHALL_URL = \"https://namu.wiki/w/%EB%AA%AC%ED%8B%B0%20%ED%99%80%20%EB%AC%B8%EC%A0%9C\"\n\nfunction GameLogo() {\n    const openHelp = () => {\n        window.open(HELP_MONTYHALL_URL, \"_blank\")\n    }\n\n    return (\n        <div className=\"flex flex-col p-16\">\n            <div className=\"flex flex-col\">\n                <p className=\"font-bold text-4xl\">MondyHall Pdx</p>\n                <div className='w-full flex justify-end'>\n                    <span className=\"mt-2 p-1 text-sm hover:bg-yellow-200 hover:ring-1 ring-yellow-500 rounded-lg duration-300\" onClick={()=>{openHelp()}}>몬티홀의 역설이란 ?</span>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default GameLogo;\n","export enum ROOM_TYPE {\n    GOAT = \"염소\",\n    CAR = \"차\"\n}\n\nexport enum GAME_TYPE {\n    READY,\n    RUNNING,\n    FINISH,\n}\n\nexport const LS_RESULTS_CHANGED: string = \"LS_RESULTS_CHANGED\"\nexport const LS_RESULTS_NOT_CHANGED: string = \"LS_RESULTS_NOT_CHANGED\"\n\nexport enum STORAGE_RESULT {\n    LS_RESULTS_CHANGED = \"LS_RESULTS_CHANGED\",\n    LS_RESULTS_NOT_CHANGED = \"LS_RESULTS_NOT_CHANGED\",\n    RESULT_FAIL = \"0\",\n    RESULT_SUCCESS = \"1\",\n}","import React, {useState ,Dispatch, SetStateAction} from 'react';\nimport { GAME_TYPE } from '../../types/game/ParameterGame';\n\nexport default ({gameState,typeChange,setTypeChange}:{gameState:GAME_TYPE, typeChange:boolean, setTypeChange:Dispatch<SetStateAction<boolean>>}) => {\n    const enable:boolean = gameState === GAME_TYPE.RUNNING\n\n    return (\n        <div className={`flex flex-col`}>\n            <div className=\"flex justify-center my-2\">\n                <span>처음 선택을 바꾸겠습니까?</span>\n            </div>\n            <div className={`buttonSetChangeType w-72 ${!enable && \"editable\"}`}>\n                <button\n                    disabled={enable}\n                    className={`change ${typeChange !== true && \"select\"}`} \n                    onClick={()=>{setTypeChange(true)}}\n                >\n                    바꾼다\n                </button>\n                <button \n                    disabled={enable}\n                    className={`notChange ${typeChange !== false && \"select\"}`} \n                    onClick={()=>{setTypeChange(false)}}\n                >\n                    바꾸지 않는다\n                </button>\n            </div>\n        </div>\n    );\n}\n","import React, { useState , Dispatch, SetStateAction} from \"react\"\nimport ReactCardFlip from \"react-card-flip\"\nimport { IRoom } from '../../types/game/GameType';\n\nconst RoomDoor = ({clickAction, isUserSel, isHostSel}:{clickAction:any, isUserSel: boolean, isHostSel: boolean}) => {\n    return (\n        <div className={`container-room door ${isUserSel ? \"userSel\" : \"\"} ${isHostSel ? \"hostSel\" : \"\"}`} onClick={()=>{clickAction()}}>\n\n        </div>\n    )\n}\n\nconst RoomInside = ({value, isUserSel, isHostSel}:{value:string, isUserSel: boolean, isHostSel: boolean}) => {\n    return (\n        <div className={`container-room inside ${isUserSel ? \"userSel\" : \"\"} ${isHostSel ? \"hostSel\" : \"\"}`}>\n            <p>{value}</p>\n        </div>\n    )\n}\n\nexport default ({roomState, clickAction}:{roomState:IRoom, clickAction: any}) => {\n\n    const pickStateMessage = () => {\n        let color: string = \"\", message: string = \"\"\n\n        if (roomState.isHostSel) {\n            color = \"text-green-500\"\n            message = \"사회자\"\n        }\n        else if (roomState.isUserSel) {\n            color = \"text-blue-500\"\n            message = \"선택한 방\"\n        }\n\n        return (\n            <span className={`text-lg ${color}`}>{message}</span>\n        )\n    }\n\n    return (\n        <div className=\"flex flex-col\">\n            <ReactCardFlip isFlipped={roomState.isOpen}>\n                <RoomDoor clickAction={clickAction} isUserSel={roomState.isUserSel} isHostSel={roomState.isHostSel}></RoomDoor>\n                <RoomInside value={roomState.value} isUserSel={roomState.isUserSel} isHostSel={roomState.isHostSel}></RoomInside>\n            </ReactCardFlip>\n            <div className=\"flex justify-center mt-4\">\n                {pickStateMessage()}\n            </div>\n        </div>\n    )\n}\n\n","import React, {useState, useEffect, Dispatch, SetStateAction} from 'react';\nimport Room from \"./Room\"\nimport { GAME_TYPE, ROOM_TYPE } from '../../types/game/ParameterGame';\nimport { GameRoom, IRoom } from '../../types/game/GameType';\n\nconst ROOM_COUNT:number = 3\n\nconst DELAY_HOST_OPEN: number = 1500\nconst DELAY_CHANGE_SEL: number = 1000\nconst DELAY_SHOW_RESULT: number = 1500\n\nconst MSG_GAME_SEQ_0_0 = \"3개의 방 중 차가 들어있을것 같은 방을 고르세요\"\nconst MSG_GAME_SEQ_1_0 = \"사회자가 염소가 들어있는 방의 문을 엽니다\"\nconst MSG_GAME_SEQ_1_1 = \"당신은 선택을 바꾸지 않았습니다\"\nconst MSG_GAME_SEQ_1_2 = \"당신은 선택을 바꿨습니다\"\nconst MSG_GAME_SEQ_2_0 = \"성공\"\nconst MSG_GAME_SEQ_2_1 = \"실패\"\n\nconst DEFAULT_ROOM:IRoom = {\n    value: ROOM_TYPE.GOAT,\n    isOpen: false,\n    isUserSel: false,\n    isHostSel: false\n}\n\nconst getDefaultRooms = ():IRoom[] => {\n    let defaultRooms:IRoom[] = []\n\n    for (let i = 0; i < ROOM_COUNT; i++) {\n        defaultRooms.push(DEFAULT_ROOM)\n    }\n\n    return defaultRooms\n}\n\nconst initIRooms = ():IRoom[] => {\n    let rooms:IRoom[] = []\n\n    // 차가 들어갈 방의 번호\n    const carIndex = Math.floor(Math.random() * ROOM_COUNT)\n\n    let roomValue: ROOM_TYPE\n\n    for (let i = 0; i < ROOM_COUNT; i++) {\n        if (i === carIndex) {\n            roomValue = ROOM_TYPE.CAR\n        }\n        else {\n            roomValue = ROOM_TYPE.GOAT\n        }\n\n        rooms.push({\n            value: roomValue,\n            isOpen: false,\n            isUserSel: false,\n            isHostSel: false\n        })\n    }\n\n    return rooms\n}\n\nconst getIndexOfRoomOpenedByHost = (roomStates: IRoom[]):number => {\n    let roomIndexByHost = -1\n\n    // RoomCount가 많지 않으므로 Break가 구지 필요할것같지 않아 map을 사용한다\n    roomStates.map((roomState, index) => {\n        if (!roomState.isUserSel && roomState.value !== ROOM_TYPE.CAR) {\n            roomIndexByHost = index\n        }\n    })\n\n    return roomIndexByHost\n}\n\nconst getSelRoomIndexByChange = (roomStates: IRoom[], roomIndexByHost: number):number => {\n    let roomIndexByChange = -1\n\n    // RoomCount가 많지 않으므로 Break가 구지 필요할것같지 않아 map을 사용한다\n    roomStates.map((roomState, index) => {\n        if (!roomState.isUserSel && index !== roomIndexByHost) {\n            roomIndexByChange = index\n        }\n    })\n\n    return roomIndexByChange\n}\n\nconst isSuccess = (roomStates: IRoom[], selIndex:number):boolean => {\n    let isSuccess = false\n\n    // RoomCount가 많지 않으므로 Break가 구지 필요할것같지 않아 map을 사용한다\n    roomStates.map((roomState, index) => {\n        if (roomState.value === ROOM_TYPE.CAR && index === selIndex) {\n            isSuccess = true\n        }\n    })\n\n    return isSuccess\n}\n\nexport default ({gameState,typeChange,throwGameError,setGameResult,setGameState}:\n    {gameState:GAME_TYPE,typeChange:boolean,throwGameError:any,setGameResult:Dispatch<SetStateAction<boolean>>,setGameState:Dispatch<SetStateAction<GAME_TYPE>>}) => {\n\n    // 게임의 메세지.\n    const [gameMessage, setGameMessage] = useState<string>(\"안녕하세요\")\n\n    // 방들의 상태를 저장한다.\n    const [roomStates, setRoomStates] = useState<IRoom[]>(getDefaultRooms())\n    \n    // 현재 진행 중인 게임 순서의 위치를 저장한다.\n    const [gameSeqIndex, setGameSeqIndex] = useState<number>(-1)\n\n    // 사용자가 지정한 방의 번호를 저장한다.\n    const [userPickRoom, setUserPickRoom] = useState<number>(-1)\n\n    // 현재 방을 열수 있는 상태인지 저장한다.\n    const [isEnableOpen, setIsEnableOpen] = useState<boolean>(false)\n    console.log(\"GameStage\", gameState.toString(), roomStates)\n\n    useEffect(()=>{\n        if (gameState === GAME_TYPE.RUNNING) {\n            setRoomStates(getDefaultRooms())\n            gameStart()\n            setGameSeqIndex(0)\n        } else {\n            gameStop()\n        }\n\n    },[gameState])\n\n    useEffect(() => {\n        // 사용자는 방 하나를 선택한다.\n        if (gameSeqIndex === 0) {\n            setIsEnableOpen(true)\n            setGameMessage(MSG_GAME_SEQ_0_0)\n        }\n        // 사용자가 방을 선택한 후 사회자가 염소가 있는 방 하나를 연다.\n        else if (gameSeqIndex === 1) {\n            setIsEnableOpen(false)\n\n            const roomIndexByHost = getIndexOfRoomOpenedByHost(roomStates)\n            if (roomIndexByHost < 0 || roomIndexByHost >= ROOM_COUNT){\n                throwGameError(\"사회자가 열 문을 찾지 못했습니다.\")\n            }\n            \n            setGameMessage(MSG_GAME_SEQ_1_0)\n\n            // 사회자가 문여는 딜레이\n            setTimeout(() => {\n                // 함수로 나눠서 실행하면 setState가 비동기적으로 실행되어 정상적인 처리가 불가능\n                let changeStates:IRoom[] = [...roomStates]\n\n                changeStates[roomIndexByHost] = {\n                    ...roomStates[roomIndexByHost],\n                    isOpen: true,\n                    isHostSel: true\n                }\n                \n                setRoomStates(changeStates)\n    \n                // 픽이 바뀌는 딜레이\n                if (typeChange) {\n                    const beforeUserPick = userPickRoom\n                    const selRoomIndexByChange = getSelRoomIndexByChange(roomStates, roomIndexByHost)\n                    setGameMessage(MSG_GAME_SEQ_1_2)\n    \n                    setTimeout(() => {\n                        // setRoomSelByUser(userPickRoom, false)\n                        // setRoomSelByUser(selRoomIndexByChange, true)\n                        \n                        // 함수로 나눠서 실행하면 setState가 비동기적으로 실행되어 정상적인 처리가 불가능\n                        let changeStates2:IRoom[] = [...changeStates]\n                        \n                        changeStates2[beforeUserPick] = {\n                            ...roomStates[beforeUserPick],\n                            isUserSel: false,\n                        }\n                        changeStates2[selRoomIndexByChange] = {\n                            ...roomStates[selRoomIndexByChange],\n                            isUserSel: true,\n                        }\n                        \n                        setRoomStates(changeStates2)\n                        setUserPickRoom(selRoomIndexByChange)\n                        setGameSeqIndex(gameSeqIndex + 1)\n                    }, DELAY_CHANGE_SEL)\n                }\n                else {\n                    setGameMessage(MSG_GAME_SEQ_1_1)\n                    setGameSeqIndex(gameSeqIndex + 1)\n                }\n            }, DELAY_HOST_OPEN)\n        }\n        else if (gameSeqIndex === 2) {\n            setTimeout(() => {\n                setRoomOpen(userPickRoom, true)\n                console.log(userPickRoom, roomStates)\n                if (isSuccess(roomStates, userPickRoom)) {\n                    setGameMessage(MSG_GAME_SEQ_2_0)\n                    setGameResult(true)\n                } else {\n                    setGameMessage(MSG_GAME_SEQ_2_1)\n                    setGameResult(false)\n                }\n\n                setGameState(GAME_TYPE.FINISH)\n            }, DELAY_SHOW_RESULT)\n        }\n    }, [gameSeqIndex])\n\n    const gameStart = () => {\n        const rooms: IRoom[] = initIRooms()\n\n        setRoomStates(rooms)\n        setGameSeqIndex(0)\n        setIsEnableOpen(true)\n    }\n\n    const gameStop = () => {\n    }\n    \n    const setRoomOpen = (index: number, isOpen: boolean) => {\n        if (gameState === GAME_TYPE.RUNNING) \n        {\n            let changeStates:IRoom[] = [...roomStates]\n\n            changeStates[index] = {\n                ...roomStates[index],\n                isOpen: true\n            }\n            \n            setRoomStates(changeStates)\n        }\n    }\n\n    const setRoomSelByUser = (index: number, isSel: boolean) => {\n        if (gameState === GAME_TYPE.RUNNING) \n        {\n            let changeStates:IRoom[] = [...roomStates]\n\n            changeStates[index] = {\n                ...roomStates[index],\n                isUserSel: isSel\n            }\n\n            setRoomStates(changeStates)\n        }\n    }\n\n    const setRoomSelByHost = (index: number, isSel: boolean) => {\n        if (gameState === GAME_TYPE.RUNNING) \n        {\n            let changeStates:IRoom[] = [...roomStates]\n\n            changeStates[index] = {\n                ...roomStates[index],\n                isHostSel: isSel\n            }\n\n            setRoomStates(changeStates)\n        }\n    }\n\n    const roomClickAction = (index: number) => {\n        if (gameState === GAME_TYPE.RUNNING &&\n            isEnableOpen &&\n            !roomStates[index].isOpen &&\n            gameSeqIndex === 0) \n        {\n            setRoomSelByUser(index, true)\n            \n            setUserPickRoom(index)\n\n            setGameSeqIndex(gameSeqIndex + 1)\n        }\n    }\n\n    const renderRooms = (index: number) => {\n        return (\n            <Room roomState={roomStates[index]} clickAction={()=>{roomClickAction(index)}}></Room>\n        )\n    }\n\n    return (\n        <div className=\"flex flex-col my-8 p-8\">\n            <div className=\"flex justify-center\">\n                {roomStates.map((roomState, index) => renderRooms(index))}\n            </div>\n            <div className=\"flex my-4 justify-center\">\n                <span className=\"font-semibold text-2xl\">{gameState ? gameMessage : \"\"}</span>\n            </div>\n        </div>\n    );\n}\n","import React, {useState ,Dispatch, SetStateAction} from 'react';\nimport { GAME_TYPE } from '../../types/game/ParameterGame';\n\nconst MSG_RESULT_SUCCESS = \"성공\"\nconst MSG_RESULT_FAIL = \"실패\"\n\nconst resultPanel = (results:boolean[], title: string) => {\n    const resultHouse = (result:boolean) => {\n        return (\n            <span className={`${result ? \"text-blue-500\" :\"text-red-500\"}`}>\n                {result ? MSG_RESULT_SUCCESS : MSG_RESULT_FAIL}\n            </span>\n        )\n    }\n\n    let successCount = 0\n    results.forEach(value => {\n        if (value) {\n            successCount += 1\n        }\n    })\n\n    let resultPercent: string = results.length > 0 ? `${((successCount/results.length)*100).toFixed(2)}%` : \"0%\"\n\n    return (\n        <div className=\"flex flex-col items-center p-4 bg-gray-200 rounded-lg mx-2\">\n            <div className=\"flex flex-col p-4 border-b border-gray-500\">\n                <span className=\"text-center text-semibold text-xl text-gray-600\">{title}</span>\n                <span className=\"text-right text-gray-600 text-sm\">{resultPercent}</span>\n            </div>\n            <div className=\"flex flex-col p-4\">\n                {results.map(result => resultHouse(result))}\n            </div>\n        </div>\n    )\n}\n\nexport default ({resultsChanged,resultsNotChanged}:{resultsChanged:boolean[], resultsNotChanged:boolean[]}) => {\n    if (resultsChanged.length === 0 && resultsNotChanged.length === 0) {\n        return (<div></div>)\n    }\n    \n\n    return (\n        <div className={`flex justify-center`}>\n            {resultPanel(resultsChanged, \"바꾼 결과\")}\n            {resultPanel(resultsNotChanged, \"바꾸지 않은 결과\")}\n        </div>\n    );\n}\n","import React, {useEffect, useState} from 'react';\nimport GameLogo from \"./GameLogo\"\nimport GameSet from \"./GameSet\"\nimport GameStage from \"./GameStage\"\nimport { GAME_TYPE, STORAGE_RESULT } from '../../types/game/ParameterGame';\nimport GameResult from './GameResult';\n\nconst getPrevResultsFromLocalStorage = (storageName:STORAGE_RESULT):boolean[] => {\n    let results:boolean[] = []\n\n    const raw = localStorage.getItem(storageName)\n\n    if (raw !== null) {\n        const rawArray = Array.from(raw)\n\n        rawArray.forEach(s => {\n            if (s === STORAGE_RESULT.RESULT_SUCCESS) {\n                results.push(true)\n            } else if (s === STORAGE_RESULT.RESULT_FAIL) {\n                results.push(false)\n            }\n        })\n    }\n\n    return results\n}\n\nconst setResultToLocalStorage = (storageName:STORAGE_RESULT, results: boolean[]) => {\n    let storageRaw: string = \"\"\n\n    results.forEach(result => {\n        if (result) {\n            storageRaw += STORAGE_RESULT.RESULT_SUCCESS\n        } else {\n            storageRaw += STORAGE_RESULT.RESULT_FAIL\n        }\n    })\n\n    localStorage.setItem(storageName, storageRaw)\n}\n\nconst removeResultFromLocalStorage = () => {\n    localStorage.removeItem(STORAGE_RESULT.LS_RESULTS_CHANGED)\n    localStorage.removeItem(STORAGE_RESULT.LS_RESULTS_NOT_CHANGED)\n}\n\nexport default () => {\n    console.log(\"GAME MAIN\")\n    \n    const [gameState, setGameState] = useState<GAME_TYPE>(GAME_TYPE.READY)\n    const [typeChange, setTypeChange] = useState(false)\n    const [gameResult, setGameResult] = useState(false)\n\n    const [resultsChanged, setResultsChanged] = useState<boolean[]>([])\n    const [resultsNotChanged, setResultsNotChanged] = useState<boolean[]>([])\n\n    const throwGameError = (msg: string):void => {\n        setGameState(GAME_TYPE.READY)\n\n        alert(msg)\n    }\n\n    useEffect(()=>{\n        loadResults()\n\n        return () => {\n            saveResults()\n        }\n    }, [])\n\n    useEffect(()=>{\n        if (gameState === GAME_TYPE.FINISH) {\n            if (typeChange) {\n                setResultsChanged([...resultsChanged,gameResult])\n            } else {\n                setResultsNotChanged([...resultsNotChanged,gameResult])\n            }\n        }\n    }, [gameState])\n\n    const loadResults = () => {\n        setResultsChanged(getPrevResultsFromLocalStorage(STORAGE_RESULT.LS_RESULTS_CHANGED))\n        setResultsNotChanged(getPrevResultsFromLocalStorage(STORAGE_RESULT.LS_RESULTS_NOT_CHANGED))\n    }\n\n    const saveResults = () => {\n        setResultToLocalStorage(STORAGE_RESULT.LS_RESULTS_CHANGED, resultsChanged)\n        setResultToLocalStorage(STORAGE_RESULT.LS_RESULTS_NOT_CHANGED, resultsNotChanged)\n    }\n\n    return (\n        <div className=\"center flex flex-col items-center shadow-lg shadow-blue-600 border p-4\">\n            <GameLogo />\n            <GameSet gameState={gameState} typeChange={typeChange} setTypeChange={setTypeChange} />\n            <GameStage gameState={gameState} typeChange={typeChange} throwGameError={throwGameError} setGameResult={setGameResult} setGameState={setGameState} />\n            <button \n                className={`px-4 py-2 mb-4 ${gameState === GAME_TYPE.RUNNING ? \"bg-red-400\": \"bg-green-400\"} font-semibold`}\n                onClick={()=>{gameState === GAME_TYPE.RUNNING ? setGameState(GAME_TYPE.READY) : setGameState(GAME_TYPE.RUNNING)}}>\n                {gameState === GAME_TYPE.RUNNING ? \"종료\": \"시작\"}\n            </button>\n\n            <div className=\"flex flex-col items-center px-2 py-6 bg-gray-50 rounded-lg\">\n                <div className=\"mb-4\">\n                    <button\n                        className=\"px-4 py-2 mx-2 bg-gray-400 rounded-full\"\n                        onClick={()=>{removeResultFromLocalStorage()}}>\n                        결과 초기화\n                    </button>\n                    <button\n                        className=\"px-4 py-2 mx-2 bg-blue-400 rounded-full\"\n                        onClick={()=>{saveResults(); alert(\"저장되었습니다\")}}>\n                        결과 저장\n                    </button>\n                </div>\n\n                <GameResult resultsChanged={resultsChanged} resultsNotChanged={resultsNotChanged}></GameResult>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport GameMain from \"./components/game/GameMain\"\n\nfunction App() {\n  return (\n    <div className=\"w-full flex flex-col items-center\">\n      <GameMain></GameMain>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"./styles.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}